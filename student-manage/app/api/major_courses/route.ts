import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

/* ------------------------------------------------------
   üìå GET: L·∫•y danh s√°ch h·ªçc ph·∫ßn thu·ªôc 1 ng√†nh
   ------------------------------------------------------ */
export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const majorId = Number(searchParams.get("major_id"));

    if (!majorId) {
      return NextResponse.json(
        { error: "Thi·∫øu major_id ƒë·ªÉ l·∫•y danh s√°ch h·ªçc ph·∫ßn" },
        { status: 400 }
      );
    }

    const courses = await prisma.major_courses.findMany({
      where: { major_id: majorId },
      include: {
        courses: {
          select: {
            course_id: true,
            course_code: true,
            course_name: true,
            credits: true,
            departments: {
              select: {
                department_name: true,
              },
            },
          },
        },
      },
      orderBy: { semester: "asc" },
    });

    return NextResponse.json(courses);
  } catch (error) {
    console.error("‚ùå GET /major_courses error:", error);
    return NextResponse.json(
      { error: "L·ªói khi l·∫•y danh s√°ch h·ªçc ph·∫ßn c·ªßa ng√†nh", details: String(error) },
      { status: 500 }
    );
  }
}

/* ------------------------------------------------------
   üìå POST: Th√™m h·ªçc ph·∫ßn v√†o ng√†nh
   ------------------------------------------------------ */
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { major_id, course_id, semester, year, is_required } = body;

    if (!major_id || !course_id) {
      return NextResponse.json(
        { error: "Thi·∫øu major_id ho·∫∑c course_id" },
        { status: 400 }
      );
    }

    // üîç Ki·ªÉm tra tr√πng l·∫∑p
    const existing = await prisma.major_courses.findUnique({
      where: {
        major_id_course_id: {
          major_id: Number(major_id),
          course_id: Number(course_id),
        },
      },
    });

    if (existing) {
      return NextResponse.json(
        { error: "H·ªçc ph·∫ßn n√†y ƒë√£ t·ªìn t·∫°i trong ng√†nh." },
        { status: 400 }
      );
    }

    // ‚úÖ T·∫°o m·ªõi
    const newEntry = await prisma.major_courses.create({
      data: {
        major_id: Number(major_id),
        course_id: Number(course_id),
        semester: semester ? Number(semester) : null,
        year: year ? Number(year) : null,
        is_required: is_required ?? true,
      },
      include: {
        courses: {
          select: { course_id: true, course_code: true, course_name: true, credits: true },
        },
      },
    });

    return NextResponse.json(newEntry, { status: 201 });
  } catch (error) {
    console.error("‚ùå POST /major_courses error:", error);
    return NextResponse.json(
      { error: "L·ªói khi th√™m h·ªçc ph·∫ßn v√†o ng√†nh", details: String(error) },
      { status: 500 }
    );
  }
}

/* ------------------------------------------------------
   üìå DELETE: X√≥a h·ªçc ph·∫ßn kh·ªèi ng√†nh
   ------------------------------------------------------ */
export async function DELETE(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const majorId = Number(searchParams.get("major_id"));
    const courseId = Number(searchParams.get("course_id"));

    if (!majorId || !courseId) {
      return NextResponse.json(
        { error: "Thi·∫øu major_id ho·∫∑c course_id ƒë·ªÉ x√≥a" },
        { status: 400 }
      );
    }

    await prisma.major_courses.delete({
      where: {
        major_id_course_id: {
          major_id: majorId,
          course_id: courseId,
        },
      },
    });

    return NextResponse.json({ message: "ƒê√£ x√≥a h·ªçc ph·∫ßn kh·ªèi ng√†nh th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå DELETE /major_courses error:", error);
    return NextResponse.json(
      { error: "L·ªói khi x√≥a h·ªçc ph·∫ßn kh·ªèi ng√†nh", details: String(error) },
      { status: 500 }
    );
  }
}
